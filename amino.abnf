; Amino Schema Language ABNF Grammar
; Version 0.1.0

; Core Structure
amino-schema = *(declaration [EOL])

declaration = field-definition / struct-definition / function-declaration / constant-definition / comment

; Basic Elements
comment = "#" *(VCHAR / WSP)
identifier = (ALPHA / "_") *(ALPHA / DIGIT / "_")
const-identifier = 1*UPPER *(ALPHA / DIGIT / "_")  ; Constants are UPPER_CASE

; Types
type = primitive-type / list-type / identifier  ; identifier for custom types
primitive-type = "Int" / "Str" / "Float" / "Bool"
list-type = "List" "[" list-element-types "]"
list-element-types = type *( "|" type )

; Field Definition
field-definition = identifier ":" SP type [field-optional] [field-constraints] [comment]
field-optional = "?"
field-constraints = "{" SP *(constraint SP) "}"
constraint = identifier ":" SP (number / string) ["," SP]
number = 1*DIGIT ["." 1*DIGIT]
string = DQUOTE *VCHAR DQUOTE

; Struct Definition
struct-definition = "struct" SP identifier SP "{" SP *(field-definition [comma] SP) "}"
comma = ","

; Function Declaration
function-declaration = identifier ":" SP function-signature [comment]
function-signature = "(" function-params ")" SP "->" SP type
function-params = [param-def *("," SP param-def)]
param-def = identifier ":" SP type  ; Named parameters

; Constant Definition
constant-definition = const-identifier ":" SP primitive-type SP "=" SP number

; Basic Types
ALPHA = %x41-5A / %x61-7A  ; A-Z / a-z
DIGIT = %x30-39  ; 0-9
UPPER = %x41-5A  ; A-Z
DQUOTE = %x22  ; "
SP = *(%x20)  ; space
VCHAR = %x21-7E  ; visible (printing) characters
WSP = SP / %x09  ; Space or tab
EOL = CRLF / LF
CRLF = CR LF    ; Internet standard newline
LF = %x0A        ; Line feed
CR = %x0D        ; Carriage return
